import * as XState from "xstate";
export interface SubState {
    targets: string[];
    sources: string[];
    states: Record<string, SubState>;
}
export declare type IntrospectMachineResult = ReturnType<typeof introspectMachine>;
export declare const introspectMachine: (machine: XState.StateNode) => {
    states: {
        id: string;
        sources: Set<string>;
    }[];
    stateMatches: string[];
    subState: SubState;
    guards: {
        lines: {
            name: string;
            required: boolean;
            events: string[];
            states: string[];
        }[];
        required: boolean;
    };
    actions: {
        lines: {
            name: string;
            required: boolean;
            events: string[];
            states: string[];
        }[];
        required: boolean;
    };
    services: {
        lines: {
            name: string;
            required: boolean;
            events: string[];
            states: string[];
        }[];
        required: boolean;
    };
    activities: {
        lines: {
            name: string;
            required: boolean;
            events: string[];
            states: string[];
        }[];
        required: boolean;
    };
    delays: {
        lines: {
            name: string;
            required: boolean;
            events: string[];
            states: string[];
        }[];
        required: boolean;
    };
    serviceSrcToIdMap: Record<string, Set<string>>;
};
