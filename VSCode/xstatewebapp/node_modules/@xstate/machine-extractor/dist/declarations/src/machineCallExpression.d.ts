import { types as t } from "@babel/core";
import { GetParserResult } from "./utils";
export declare type TMachineCallExpression = GetParserResult<typeof MachineCallExpression>;
export declare const MachineCallExpression: import("./types").Parser<t.CallExpression, {
    callee: t.MemberExpression;
    calleeName: string;
    definition: {
        id?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        initial?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        type?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        delimiter?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        entry?: (import("./actions").ActionNode[] & import("./utils").ObjectPropertyInfo) | undefined;
        exit?: (import("./actions").ActionNode[] & import("./utils").ObjectPropertyInfo) | undefined;
        onEntry?: (import("./actions").ActionNode[] & import("./utils").ObjectPropertyInfo) | undefined;
        onExit?: (import("./actions").ActionNode[] & import("./utils").ObjectPropertyInfo) | undefined;
        invoke?: (import("./utils").GetObjectKeysResult<{
            id: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
            src: import("./types").AnyParser<InvokeNode>;
            onDone: import("./types").AnyParser<import("./utils").GetObjectKeysResult<{
                target: import("./types").AnyParser<{
                    node: t.Node;
                    value: string;
                }[]>;
                actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
                cond: import("./types").AnyParser<import("./conds").CondNode>;
                description: import("./types").AnyParser<{
                    node: t.Node;
                    value: string;
                }>;
            }>[]>;
            onError: import("./types").AnyParser<import("./utils").GetObjectKeysResult<{
                target: import("./types").AnyParser<{
                    node: t.Node;
                    value: string;
                }[]>;
                actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
                cond: import("./types").AnyParser<import("./conds").CondNode>;
                description: import("./types").AnyParser<{
                    node: t.Node;
                    value: string;
                }>;
            }>[]>;
            autoForward: import("./types").AnyParser<{
                value: boolean;
                node: t.BooleanLiteral;
            }>;
            forward: import("./types").AnyParser<{
                value: boolean;
                node: t.BooleanLiteral;
            }>;
        }>[] & import("./utils").ObjectPropertyInfo) | undefined;
        always?: (import("./utils").GetObjectKeysResult<{
            target: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }[]>;
            actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
            cond: import("./types").AnyParser<import("./conds").CondNode>;
            description: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
        }>[] & import("./utils").ObjectPropertyInfo) | undefined;
        onDone?: (import("./utils").GetObjectKeysResult<{
            target: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }[]>;
            actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
            cond: import("./types").AnyParser<import("./conds").CondNode>;
            description: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
        }>[] & import("./utils").ObjectPropertyInfo) | undefined;
        on?: (import("./utils").ObjectOfReturn<import("./utils").GetObjectKeysResult<{
            target: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }[]>;
            actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
            cond: import("./types").AnyParser<import("./conds").CondNode>;
            description: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
        }>[]> & import("./utils").ObjectPropertyInfo) | undefined;
        after?: (import("./utils").ObjectOfReturn<import("./utils").GetObjectKeysResult<{
            target: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }[]>;
            actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
            cond: import("./types").AnyParser<import("./conds").CondNode>;
            description: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
        }>[]> & import("./utils").ObjectPropertyInfo) | undefined;
        history?: (HistoryNode & import("./utils").ObjectPropertyInfo) | undefined;
        tags?: ({
            node: t.Node;
            value: string;
        }[] & import("./utils").ObjectPropertyInfo) | undefined;
        states?: (import("./utils").ObjectOfReturn<import("./stateNode").StateNodeReturn> & import("./utils").ObjectPropertyInfo) | undefined;
        node: t.Node & import("./utils").ObjectPropertyInfo;
        meta?: ({
            description?: ({
                node: t.Node;
                value: string;
            } & import("./utils").ObjectPropertyInfo) | undefined;
        } & {
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        tsTypes?: ({
            node: t.Node;
            value?: boolean | undefined;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        context?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        data?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        schema?: ({
            context?: ({
                node: t.Node;
            } & import("./utils").ObjectPropertyInfo) | undefined;
            events?: ({
                node: t.Node;
            } & import("./utils").ObjectPropertyInfo) | undefined;
            services?: ({
                node: t.Node;
            } & import("./utils").ObjectPropertyInfo) | undefined;
        } & {
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        preserveActionOrder?: ({
            value: boolean;
            node: t.BooleanLiteral;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        parallel?: ({
            value: boolean;
            node: t.BooleanLiteral;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        description?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        key?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        version?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        activities?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        strict?: ({
            value: boolean;
            node: t.BooleanLiteral;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        parent?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        order?: ({
            value: number;
            node: t.NumericLiteral;
        } & import("./utils").ObjectPropertyInfo) | undefined;
    } | undefined;
    options: import("./utils").GetObjectKeysResult<{
        actions: import("./types").AnyParser<import("./utils").ObjectOfReturn<import("./actions").ActionNode | {
            node: t.Node;
        }>>;
        services: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        guards: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        delays: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        devTools: import("./types").AnyParser<{
            value: boolean;
            node: t.BooleanLiteral;
        }>;
    }> | undefined;
    isMemberExpression: boolean;
    typeArguments: {
        node: t.TSTypeParameterInstantiation;
        params: ({
            node: t.TSType;
        } | undefined)[];
    } | undefined;
    node: t.CallExpression;
} | {
    callee: t.Identifier;
    calleeName: string;
    definition: {
        id?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        initial?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        type?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        delimiter?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        entry?: (import("./actions").ActionNode[] & import("./utils").ObjectPropertyInfo) | undefined;
        exit?: (import("./actions").ActionNode[] & import("./utils").ObjectPropertyInfo) | undefined;
        onEntry?: (import("./actions").ActionNode[] & import("./utils").ObjectPropertyInfo) | undefined;
        onExit?: (import("./actions").ActionNode[] & import("./utils").ObjectPropertyInfo) | undefined;
        invoke?: (import("./utils").GetObjectKeysResult<{
            id: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
            src: import("./types").AnyParser<InvokeNode>;
            onDone: import("./types").AnyParser<import("./utils").GetObjectKeysResult<{
                target: import("./types").AnyParser<{
                    node: t.Node;
                    value: string;
                }[]>;
                actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
                cond: import("./types").AnyParser<import("./conds").CondNode>;
                description: import("./types").AnyParser<{
                    node: t.Node;
                    value: string;
                }>;
            }>[]>;
            onError: import("./types").AnyParser<import("./utils").GetObjectKeysResult<{
                target: import("./types").AnyParser<{
                    node: t.Node;
                    value: string;
                }[]>;
                actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
                cond: import("./types").AnyParser<import("./conds").CondNode>;
                description: import("./types").AnyParser<{
                    node: t.Node;
                    value: string;
                }>;
            }>[]>;
            autoForward: import("./types").AnyParser<{
                value: boolean;
                node: t.BooleanLiteral;
            }>;
            forward: import("./types").AnyParser<{
                value: boolean;
                node: t.BooleanLiteral;
            }>;
        }>[] & import("./utils").ObjectPropertyInfo) | undefined;
        always?: (import("./utils").GetObjectKeysResult<{
            target: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }[]>;
            actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
            cond: import("./types").AnyParser<import("./conds").CondNode>;
            description: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
        }>[] & import("./utils").ObjectPropertyInfo) | undefined;
        onDone?: (import("./utils").GetObjectKeysResult<{
            target: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }[]>;
            actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
            cond: import("./types").AnyParser<import("./conds").CondNode>;
            description: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
        }>[] & import("./utils").ObjectPropertyInfo) | undefined;
        on?: (import("./utils").ObjectOfReturn<import("./utils").GetObjectKeysResult<{
            target: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }[]>;
            actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
            cond: import("./types").AnyParser<import("./conds").CondNode>;
            description: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
        }>[]> & import("./utils").ObjectPropertyInfo) | undefined;
        after?: (import("./utils").ObjectOfReturn<import("./utils").GetObjectKeysResult<{
            target: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }[]>;
            actions: import("./types").AnyParser<import("./actions").ActionNode[]>;
            cond: import("./types").AnyParser<import("./conds").CondNode>;
            description: import("./types").AnyParser<{
                node: t.Node;
                value: string;
            }>;
        }>[]> & import("./utils").ObjectPropertyInfo) | undefined;
        history?: (HistoryNode & import("./utils").ObjectPropertyInfo) | undefined;
        tags?: ({
            node: t.Node;
            value: string;
        }[] & import("./utils").ObjectPropertyInfo) | undefined;
        states?: (import("./utils").ObjectOfReturn<import("./stateNode").StateNodeReturn> & import("./utils").ObjectPropertyInfo) | undefined;
        node: t.Node & import("./utils").ObjectPropertyInfo;
        meta?: ({
            description?: ({
                node: t.Node;
                value: string;
            } & import("./utils").ObjectPropertyInfo) | undefined;
        } & {
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        tsTypes?: ({
            node: t.Node;
            value?: boolean | undefined;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        context?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        data?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        schema?: ({
            context?: ({
                node: t.Node;
            } & import("./utils").ObjectPropertyInfo) | undefined;
            events?: ({
                node: t.Node;
            } & import("./utils").ObjectPropertyInfo) | undefined;
            services?: ({
                node: t.Node;
            } & import("./utils").ObjectPropertyInfo) | undefined;
        } & {
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        preserveActionOrder?: ({
            value: boolean;
            node: t.BooleanLiteral;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        parallel?: ({
            value: boolean;
            node: t.BooleanLiteral;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        description?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        key?: ({
            node: t.Node;
            value: string;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        version?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        activities?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        strict?: ({
            value: boolean;
            node: t.BooleanLiteral;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        parent?: ({
            node: t.Node;
        } & import("./utils").ObjectPropertyInfo) | undefined;
        order?: ({
            value: number;
            node: t.NumericLiteral;
        } & import("./utils").ObjectPropertyInfo) | undefined;
    } | undefined;
    options: import("./utils").GetObjectKeysResult<{
        actions: import("./types").AnyParser<import("./utils").ObjectOfReturn<import("./actions").ActionNode | {
            node: t.Node;
        }>>;
        services: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        guards: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        delays: import("./types").AnyParser<import("./utils").ObjectOfReturn<{
            node: t.Node;
        }>>;
        devTools: import("./types").AnyParser<{
            value: boolean;
            node: t.BooleanLiteral;
        }>;
    }> | undefined;
    isMemberExpression: boolean;
    typeArguments: {
        node: t.TSTypeParameterInstantiation;
        params: ({
            node: t.TSType;
        } | undefined)[];
    } | undefined;
    node: t.CallExpression;
} | undefined>;
